:numbered:
:author: Agostinho Brito
:data-uri:
:icons: font
:experimental:
:stem:
:imagesdir: ./figs
:toc: left
:doctype: book
:source-highlighter: pygments
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Appêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

= Projeto de programação em C (Terceira Unidade) =

[IMPORTANT]
.Leia com atenção
====
As descrições dos projetos devem ser lidas com atenção. Se não estiverem
claras, procure o professor para que o texto seja atualizado.
====

== Apresentação ==

Eletrônica digital é uma parte da eletrônica onde utilizados circuitos
eletrônicos para realizar cálculos de expressões lógicas usando
dispositivos físicos. Dispositivos como esse estão presentes no dia a
dia da maioria das pessoas, sejam em computadores ou telefones
celulares.

As unidades básicas que compõem esses circuitos são chamadas de portas
lógicas e cada tipo de porta realiza o cálculo de funções matemáticas bem
simples com quantidades binárias. Por exemplo, a porta lógica
normalmente denominada AND calcula o _AND_ lógico entre dois
bits. Assim, somente se as duas entradas dessa porta forem iguais ao
que se convenciona ser o "1" lógico a saída também será igual
a 1. Combinações de várias milhões dessas portas são usadas para
construir os computadores modernos.

== Objetivos ==

Para explorar o uso das expressões lógicas em programação, propõe-se
um projeto que envolve a construção de uma calculadora lógica de
tabelas-verdade. Tabelas-verdades são espécies de tabelas que mostram
para as várias possíveis combinações de valores de entrada as suas
respectivas saídas calculadas pelo circuito lógico.

Nesse contexto, o presente projeto visa que o aluno desenvolva um
programa em C que seja capaz de calcular tabelas-verdade para
expressões lógicas combinacionais expressas na forma de uma
representação de circuito. Não será implementado o circuito em si, mas
sim uma simulação do mesmo feita na forma de um programa.

Cada circuito circuito digital é especificado usando uma linguagem de
especificação de circuito. A descrição de um dado circuito escrita em
um arquivo no formato de texto simples deverá ser lida pela ferramenta
desenvolvida e esta apresentará os resultados da expressão lógica
correspondente.

== Linguagem de descrição de circuito ==

No âmbito desse projeto, os circuitos serão definidos em um arquivo
que contém uma série de linhas, e em cada linha um comando
correspondente a um dos três tipos de componentes possíveis: portas
lógicas, variáveis de entrada e variáveis de saída. Todos os valores
de entrada ou saída desses componentes sempre assumirão valores
iguais a `0` ou `1`. Os componentes do circuito implementarão as
seguintes portas lógicas com suas respectivas operações matemáticas:

AND:: possui duas entradas `A` e `B` e produz uma saída `C` conforme a
seguinte tabela
|===
| Símbolo | A | B | C 

.4+^.^| image:andgate.svg[width=150] | 0 | 0 | 0 
| 0 | 1 | 0 
| 1 | 0 | 0 
| 1 | 1 | 1 
|===

OR:: possui duas entradas `A` e `B` e produz uma saída `C` conforme a
seguinte tabela
|===
| Símbolo | A | B | C 

.4+^.^| image:orgate.svg[width=150] | 0 | 0 | 0 
| 0 | 1 | 1 
| 1 | 0 | 1 
| 1 | 1 | 1 
|===

NOT:: possui duas entradas `A` e `B` e produz uma saída `C` conforme a
seguinte tabela
|===
| Símbolo | A | C 

.4+^.^| image:notgate.svg[width=150] | 0 | 0 
| 0 | 1 
|===

NAND:: possui duas entradas `A` e `B` e produz uma saída `C` conforme a
seguinte tabela
|===
| Símbolo | A | B | C 

.4+^.^| image:nandgate.svg[width=150] | 0 | 0 | 1 
| 0 | 1 | 1 
| 1 | 0 | 1 
| 1 | 1 | 0 
|===

NOR:: possui duas entradas `A` e `B` e produz uma saída `C` conforme a
seguinte tabela
|===
| Símbolo | A | B | C 

.4+^.^| image:norgate.svg[width=150] | 0 | 0 | 1 
| 0 | 1 | 0 
| 1 | 0 | 0 
| 1 | 1 | 0 
|===

XOR:: possui duas entradas `A` e `B` e produz uma saída `C` conforme a
seguinte tabela
|===
| Símbolo | A | B | C 

.4+^.^| image:xorgate.svg[width=150] | 0 | 0 | 0 
| 0 | 1 | 1 
| 1 | 0 | 1 
| 1 | 1 | 0 
|===

== Formato do arquivo de descrição de circuito

O arquivo que conterá a representação do circuito é formado por várias
linhas, cada uma contendo uma instrução sobre a existência de uma
porta lógica, entrada ou saída que o circuito possui. As linhas
começam com um identificador, seguido de informações referentes ao
mesmo. Um arquivo de descrição de circuito pode conter as seguintes
entradas:

|===
|Identificador | Descrição

| CIRCUIT _id_ | Descritor do circuito com nome _id_ (literal)
 
| AND N1 N2 N3 | Porta AND com entradas ligadas aos nós N1 e N2 e saída ligada ao nó N3

| OR N1 N2 N3 | Porta OR com entradas ligadas aos nós N1 e N2 e saída
   ligada ao nó N3
	 
| NOT N1 N2 | Porta OR com entrada ligada ao nó N1 e saída ligada ao nó N2

| INPUT N1 _id_ | Entrada conectada ao nó N1 com nome _id_

| OUTPUT N1 _id_ | Entrada conectada ao nó N1 com nome _id_

| NAND N1 N2 N3 | Porta NAND com entradas ligadas aos nós N1 e N2 e saída ligada ao nó N3

|NOR N1 N2 N3 | Porta NOR com entradas ligadas aos nós N1 e N2 e saída
 ligada ao nó N3
 
| XOR N1 N2 N3 | Porta XOR com entradas ligadas aos nós N1 e N2 e saída ligada ao nó N3
|===

== Exemplo de circuito ==

Considere o circuito lógico combinacional apresentado na Figura
<<fig-circuito>>. A descrição do circuito utilizando a especificação
proposta na última seção pode ser descrita pelo arquivo cujo conteúdo
é mostrado na Listagem <<exa-circuito>>.

[#fig-circuito]
.Exemplo de circuito lógico
image::circuito.svg[]

[#exa-circuito]
[source]
.Arquivo com a especificação do circuito
----
CIRCUIT Expressao logica
NOT 1 4
AND 2 3 8
NOR 4 8 7
AND 1 7 5
AND 2 5 6
INPUT 1 A
INPUT 2 B
INPUT 3 C
OUTPUT 6 S
----

A tabela verdade correspondente a esse circuito é deverá ser
apresentada conforme apresentado na Listagem
<<exa-tabelaverdade>>. Perceba que cada linha contém uma sequência de
combinações de entrada seguido da sequência de combinações das saídas
especificadas. 

[#exa-tabelaverdade]
[source,shell]
.Tabela-verdade produzida para o circuito do exemplo
----
-------------------
Entradas  | Saídas
-------------------
A | B | C |   S
-------------------
1 | 1 | 1 |   0
1 | 1 | 0 |   1
1 | 0 | 1 |   0
1 | 0 | 0 |   0
0 | 1 | 1 |   0
0 | 1 | 0 |   0
0 | 0 | 1 |   0
0 | 0 | 0 |   0
----
== Tarefas ==

O projeto deverá contemplar as seguintes etapas:

Preparação de estruturas (2,0 pontos):: Todos os componentes do
circuito (ex: portas lógicas, entrada, saídas e conectores} devem ser
representados por estruturas (`structs`) que deverão armazenar valores
e estados de cada um. Preveja que os componentes serão armazenados em
arrays desses `structs`, pois ficará mais fácil manter um bom
entendimento do circuito. Podem ser assumidos tamanhos máximos para a
quantidade de entradas, saídas, portas e conectores que serão
escolhidos pelo grupo.

Preparação das combinações de entrada (2,0 pontos):: As possíveis
combinações dos valores de entrada deverão ser calculadas utilizando
algoritmos desenvolvidos para esse fim. Sugere-se utilizar uma matriz
para guardar essas combinações, para facilitar aspectos de
implementação.

Codificar a resolução do circuito (3,0 pontos):: Elaborar algoritmos
pertinentes para solucionar o circuito e encontrar a
tabela-verdade. Com isso, para cada combinação dos valores de entrada,
o programa desenvolvido deverá ser capaz de calcular todos os valores
das saídas previstas e exibi-los de forma semelhante ao mostrado no
exemplo.

Estabelecer processos de leitura de arquivos (1,0 ponto):: Todos os
circuitos DEVERÃO ser lidos CORRETAMENTE de arquivos no computador,
cujo nome do arquivo a ser processado deverá ser fornecido pelo
usuário NO MOMENTO DA EXECUÇÃO do código.

Experimentar o programa criado com um circuito-exemplo (1,0 ponto)::
Prepare o arquivo equivalente para o circuito da figura
<<fig-somador>>, que implementa um somador de 2 bits. Apresente a
tabela-verdade para as saídas previstas.

[#fig-somador]
.Somador de 2 bits
image::somador.svg[]

Hospedar e documentar o programa criado (1,0 pontos):: O programa
criado deverá ser hospedado no github.com, deverá ser criado seu
manual de utilização, com ilustrações, ensinando como baixar,
compilar e executar, bem como utilizar o programa. Proveja em um
exemplo, uma ilustração de circuito, com seu arquivo correspondente,
de modo que o usuário possa testar seu projeto.
