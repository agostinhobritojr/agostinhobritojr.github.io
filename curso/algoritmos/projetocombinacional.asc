:numbered:
:author: Agostinho Brito
:data-uri:
:icons: font
:experimental:
:stem:
// :imagesdir: ./figs
:toc: left
:doctype: book
:source-highlighter: pygments
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Appêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

= Projeto de programação em C (Terceira Unidade) =

[IMPORTANT]
.Leia com atenção
====
As descrições dos projetos devem ser lidas com atenção. Se não estiverem
claras, procure o professor para que o texto seja atualizado.
====

== Objetivos ==

Construir um programa em C que seja capaz de calcular tabelas-verdade
para expressões lógicas combinacionais descritas na forma de circuitos
digitais simples usando uma linguagem de especificação de circuito. A
descrição de um dado circuito deverá ser escrita em um arquivo no
formato de texto simples e lida pela ferramenta desenvolvida,
apresentando os resultados da expressão lógica correspondente.

== Linguagem de descrição de circuito ==

|===
|Identificador | Descrição

| CIRCUIT _id_ | Descritor do circuito com nome _id_ (literal)
 
| AND N1 N2 N3 | Porta AND com entradas ligadas aos nós N1 e N2 e saída ligada ao nó N3

| OR N1 N2 N3 | Porta OR com entradas ligadas aos nós N1 e N2 e saída
   ligada ao nó N3
	 
| NOT N1 N2 | Porta OR com entrada ligada ao nó N1 e saída ligada ao nó N2

| INPUT N1 _id_ | Entrada conectada ao nó N1 com nome _id_

| OUTPUT N1 _id_ | Entrada conectada ao nó N1 com nome _id_

| NAND N1 N2 N3 | Porta NAND com entradas ligadas aos nós N1 e N2 e saída ligada ao nó N3

|NOR N1 N2 N3 | Porta NOR com entradas ligadas aos nós N1 e N2 e saída
 ligada ao nó N3
 
| XOR N1 N2 N3 | Porta XOR com entradas ligadas aos nós N1 e N2 e saída ligada ao nó N3
|===

== Exemplo de circuito ==

Considere o circuito lógico combinacional apresentado na Figura
<<fig-circuito>>. A descrição formal do circuito utilizando a
especificação proposta pode ser descrita pelo conjunto de linhas
mostrado na Listagem <<exa-circuito>>.

[#fig-circuito]
.Exemplo de circuito lógico
image::circuito.svg[]


[#exa-circuito]
[source]
.Arquivo com a especificação do circuito
----
CIRCUIT Expressao logica
NOT 1 4
AND 2 3 8
NOR 4 8 7
AND 1 7 5
AND 2 5 6
INPUT 1 A
INPUT 2 B
INPUT 3 C
OUTPUT 6 S
----

A tabela verdade correspondente a esse circuito é deverá ser
apresentada conforme apresentado na Listagem <<exa-tabelaverdade>>.


[#exa-tabelaverdade]
[source,shell]
.Tabela-verdade produzida para o circuito do exemplo
----
-------------------
Entradas  | Saídas
-------------------
A | B | C |   S
-------------------
1 | 1 | 1 |   0
1 | 1 | 0 |   1
1 | 0 | 1 |   0
1 | 0 | 0 |   0
0 | 1 | 1 |   0
0 | 1 | 0 |   0
0 | 0 | 1 |   0
0 | 0 | 0 |   0
----
== Tarefas ==

O projeto deverá contemplar as seguintes etapas:

Preparação de estruturas (2,0 pontos):: Todos os componentes do
circuito (ex: portas lógicas, entrada, saídas e conectores} devem ser
representados por estruturas (`structs`) que deverão armazenar valores
e estados de cada um. Preveja que os componentes serão armazenados em
arrays desses `structs`, pois ficará mais fácil manter um bom
entendimento do circuito. Podem ser assumidos tamanhos máximos para a
quantidade de entradas, saídas, portas e conectores que serão
escolhidos pelo grupo.

Preparação das combinações de entrada (2,0 pontos):: As possíveis
combinações dos valores de entrada deverão ser calculadas utilizando
algoritmos desenvolvidos para esse fim. Sugere-se utilizar uma matriz
para guardar essas combinações, para facilitar aspectos de
implementação.

Codificar a resolução do circuito (3,0 pontos):: Elaborar algoritmos
pertinentes para solucionar o circuito e encontrar a
tabela-verdade. Com isso, para cada combinação dos valores de entrada,
o programa desenvolvido deverá ser capaz de calcular todos os valores
das saídas previstas e exibi-los de forma semelhante ao mostrado no
exemplo.

Estabelecer processos de leitura de arquivos (1,0 ponto)::
Todos os circuitos DEVERÃO ser lidos CORRETAMENTE de arquivos no computador, cujo
nome do arquivo a ser processado deverá ser fornecido pelo usuário NO
MOMENTO DA EXECUÇÃO do código.

Hospedar e documentar o programa criado (2,0 pontos):: O programa
criado deverá ser hospedado no github.com, deverá ser criado seu
manual de utilização, com ilustrações, ensinando como baixar,
compilar e executar, bem como utilizar o programa. Proveja em um
exemplo, uma ilustração de circuito, com seu arquivo correspondente,
de modo que o usuário possa testar seu projeto.
