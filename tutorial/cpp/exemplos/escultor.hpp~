#ifndef ESCULTOR_HPP
#define ESCULTOR_HPP
#include <string>

using namespace std;

struct Voxel{
  char v; // indica se o voxel estah preenchido ou nao
  float r,g,b,a; // indica a cor do voxel, RGB e sua transparencia alpha
  // R,G,B,A : [0,1]
  // A=0 : transparente
  // A=1 : opaco
};

class Escultor{
private:
  Voxel ***v; // array que armazena o bloco 3d
  float lado; // metade da largura de um cubo
  float delta; // distancia entre os cubos
  float r,g,b,a;
  int nx, ny, nz; // dimensoes do cubo em x,y,z
  int i, x, y, z; // variaveis auxiliares
  enum {OFF, VECT}; // identifica o tipo de arquivo para salvamento
  void gravaOFF(string nome); // grava no formato OFF
  void gravaVECT(string nome); // grava no formato VECT
public:
  // construtor da classe
  Escultor(int _nx=1, int _ny=1, int _nz=1);
  
  // insere um paralelepipedo com diagonais opostos
  // (x0, y0, z0) -> (x1, y1, z1)
  void botaCaixa(int x0, int x1, int y0, int y1, int z0, int z1);
  
  // insere uma elipse com centro em (x0, y0, z0) e raios rx, ry, rz
  void botaElipse(int x0, int y0, int z0, int rx, int ry, int rz);
  
  // insere uma esfera com centro em (x0, y0, z0) e raio r
  void botaEsfera(int x0, int y0, int z0, int rr);

  // insere um voxel em (x0, y0, z0)
  void botaVoxel(int x0, int y0, int z0);

  // remove um paralelepipedo com diagonais opostos
  // (x0, y0, z0) -> (x1, y1, z1)
  void tiraCaixa(int x0, int x1, int y0, int y1, int z0, int z1);

  // remove uma elipse com centro em (x0, y0, z0) e raios rx, ry, rz
  void tiraElipse(int x0, int y0, int z0, int rx, int ry, int rz);

  // remove uma esfera com centro em (x0, y0, z0) e raio r
  void tiraEsfera(int x0, int y0, int z0, int rr); 

  // remove um voxel em (x0, y0, z0)
  void tiraVoxel(int x0, int y0, int z0);

  // grava o modelo criado no arquivo "nome.off"
  // se a funcao for chamada, por exemplo, da forma
  //        v.grava("saida",VECT);
  // o arquivo eh gravado no formato vect
  void grava(string nome, int mode=OFF);

  // remove os voxels totalmente rodeados, pois nao serao vistos
  // no visualizador, alem de consumirem recursos para exibicao
  void limpaVoxels(void);

  // define o espacamento entre os cubos do bloco
  void setDelta(float _delta);

  // define a cor de desenho
  void setColor(float _r, float _g, float _b, float _a);

  // faz o bloco assumir a uni√£o do bloco atual com
  // o bloco representado no escultor "e"
  // a uniao somente deve ocorrer se os dois blocos
  // forem do mesmo tamanho
  void uniao(Escultor &e);

  // faz o bloco assumir a interesecao do bloco atual com
  // o bloco representado no escultor "e"
  // a intersecao somente deve ocorrer se os dois blocos
  // forem do mesmo tamanho
  void intersecao(Escultor &e);

  // faz o bloco assumir a diferenca entre bloco atual
  // e o bloco representado no escultor "e"
  // a diferenca somente deve ocorrer se os dois blocos
  // forem do mesmo tamanho
  void diferenca(Escultor &e);
};
#endif
