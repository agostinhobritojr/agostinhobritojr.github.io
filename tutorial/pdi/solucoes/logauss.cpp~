#include <iostream>
#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

void printmask(Mat &m){
  for(int i=0; i<m.size().height; i++){
    for(int j=0; j<m.size().width; j++){
      cout << m.at<float>(i,j) << ",";
    }
    cout << endl;
  }
}

int main(int argvc, char** argv){
  VideoCapture video;
  float gauss[] = {1,2,1,
				   2,4,2,
				   1,2,1};
  float laplacian[]={0,-1,0,
					 -1,4,-1,
					 0,-1,0};

  Mat cap, frame, frame32f;
  Mat mgauss(3,3,CV_32F);
  Mat mlapla(3,3,CV_32F);
  Mat result1, result2;
  
  double width, height, min, max;
  int absolut;
  char key;
  
  video.open(0); 
  if(!video.isOpened()) 
    return -1;
  width=video.get(CV_CAP_PROP_FRAME_WIDTH);
  height=video.get(CV_CAP_PROP_FRAME_HEIGHT);
  std::cout << "largura=" << width << "\n";;
  std::cout << "altura =" << height<< "\n";;

  namedWindow("filtroespacial",1);

  mgauss = Mat(3, 3, CV_32F, gauss);
  mlapla = Mat(3, 3, CV_32F, laplacian);

  for(;;){
    video >> cap; 
    cvtColor(cap, frame, CV_BGR2GRAY);
    flip(frame, frame, 1);
    imshow("original", frame);
    frame.convertTo(frame32f, CV_32F);
    filter2D(frame32f, result1, frame32f.depth(), mgauss, Point(1,1), 0);
    filter2D(result1, result2, frame32f.depth(), mlaplaciano, Point(1,1), 0);

    result2.convertTo(result, CV_8U);
    imshow("filtroespacial", result);
    key = (char) waitKey(10);
	if(key == 'ESC')
	  break;
  }
  return 0;
}
