#include <iostream>
#include <opencv2/opencv.hpp>
#include <fstream>
#include <iomanip>

using namespace std;
using namespace cv;

Mat frame32f, frameok;

int top_slider = 10;
int top_slider_max = 200;

char TrackbarName[50];

void on_trackbar_line(int, void*){
  Canny(frameok, frame32f, top_slider, 3*top_slider);
  imshow("canny", frame32f);
}

int main(int argc, char** argv){
  Mat image, frame, frameH, frameV; 

  int MAXITER=5;
  int depth, radius;
  
  ofstream fout;

  Mat result, zeros;
  int width, height;
  double min, max;
  char key;
  
  image= imread(argv[1],CV_LOAD_IMAGE_GRAYSCALE);
  
  if(!image.data){
	cout << "nao abriu" << argv[1] << endl;
    cout << argv[0] << " imagem.jpg";
  }

  width=image.size().width;
  height=image.size().height;
  zeros = Mat::zeros(height, width, CV_32F);

  sprintf( TrackbarName, "T1=%d/T2=%d", top_slider_max, 3*top_slider_max);

  namedWindow("canny",1);
  
  createTrackbar( TrackbarName, "canny",
                  &top_slider,
                  top_slider_max,
                  on_trackbar_line );

  image.copyTo(frameok);
  
  on_trackbar_line(top_slider, 0 );
  
  key = (char) waitKey();
  if( key == 27 ){
    fout.open("saida.fig");
    fout << "#FIG 3.2  Produced by xfig version 3.2.5c" << endl;
    fout << "Landscape" << endl;
    fout << "Center" << endl;
    fout << "Metric" << endl;
    fout << "A4" << endl;      
    fout << "100.00" << endl;
    fout << "Single" << endl;
    fout << "-2" << endl;
    fout << "1200 2" << endl;
    for(int i=0; i<256; i++){
      fout << std::dec;
      fout << "0 " << i+32 << " #";
      fout << std::hex;
      fout << setw(2) << setfill('0') << i;
      fout << setw(2) << setfill('0') << i;
      fout << setw(2) << setfill('0') << i;
      fout << endl;
    }
    fout << std::dec;

    for(int k=MAXITER; k>=0; k--){
      Canny(frameok, frame32f, (MAXITER-k+1)*10, (MAXITER-k+1)*30);
      normalize(frame32f, frame32f, 0.0, 1.0, NORM_MINMAX);
      frame32f.convertTo(frame,CV_8U);
      depth = k+50;
      radius = (k+1)*100;
      for(int i=0; i<height; i++){
        for(int j=0; j<width; j++){
          int gray = image.at<uchar>(i,j);
          if(frame.at<uchar>(i,j) > 0 && rand()%MAXITER >= k){
            circle(image,cv::Point(j,i),k,CV_RGB(gray,gray,gray),-1, CV_AA);
            fout << "1 3 0 0 0 ";
            fout << image.at<uchar>(i,j)+32 << " ";
            fout << depth;
            fout << " -1 20 0.000 1 0.0000 ";
            fout << j*100 << " " << i*100 << " ";
            fout << radius << " " << radius;
            fout << " " << j*100 << " " << j*100 << " ";
            fout << j*100+radius << " " << j*100 << endl;
          }
        }
      }
    }
    fout.close();
    imwrite("saida.png", image);
  }
  return 0;
}
